#![allow(dead_code)]
use crate::math as m;
use sokol::gfx as sg;
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i examples/mrt/shader.glsl -o examples/mrt/shader.rs -l glsl430:metal_macos:hlsl5 -f sokol_rust

    Overview:
    =========
    Shader program: 'dbg':
        Get shader desc: dbg_shader_desc(sg::query_backend());
        Vertex Shader: vs_dbg
        Fragment Shader: fs_dbg
        Attributes:
            ATTR_DBG_POS => 0
    Shader program: 'fsq':
        Get shader desc: fsq_shader_desc(sg::query_backend());
        Vertex Shader: vs_fsq
        Fragment Shader: fs_fsq
        Attributes:
            ATTR_FSQ_POS => 0
    Shader program: 'offscreen':
        Get shader desc: offscreen_shader_desc(sg::query_backend());
        Vertex Shader: vs_offscreen
        Fragment Shader: fs_offscreen
        Attributes:
            ATTR_OFFSCREEN_POS => 0
            ATTR_OFFSCREEN_BRIGHT0 => 1
    Bindings:
        Uniform block 'fsq_params':
            Rust struct: FsqParams
            Bind slot: UB_FSQ_PARAMS => 0
        Uniform block 'offscreen_params':
            Rust struct: OffscreenParams
            Bind slot: UB_OFFSCREEN_PARAMS => 0
        Texture 'tex':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: VIEW_TEX => 0
        Texture 'tex0':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: VIEW_TEX0 => 0
        Texture 'tex1':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: VIEW_TEX1 => 1
        Texture 'tex2':
            Image type: sg::ImageType::Dim2
            Sample type: sg::ImageSampleType::Float
            Multisampled: false
            Bind slot: VIEW_TEX2 => 2
        Sampler 'smp':
            Type: sg::SamplerType::Filtering
            Bind slot: SMP_SMP => 0
*/
pub const ATTR_DBG_POS: usize = 0;
pub const ATTR_FSQ_POS: usize = 0;
pub const ATTR_OFFSCREEN_POS: usize = 0;
pub const ATTR_OFFSCREEN_BRIGHT0: usize = 1;
pub const UB_FSQ_PARAMS: usize = 0;
pub const UB_OFFSCREEN_PARAMS: usize = 0;
pub const VIEW_TEX: usize = 0;
pub const VIEW_TEX0: usize = 0;
pub const VIEW_TEX1: usize = 1;
pub const VIEW_TEX2: usize = 2;
pub const SMP_SMP: usize = 0;
#[repr(C, align(16))]
pub struct FsqParams {
    pub offset: m::Vec2,
    pub _pad_8: [u8; 8],
}
#[repr(C, align(16))]
pub struct OffscreenParams {
    pub mvp: m::Mat4,
}
/*
    #version 430

    uniform vec4 offscreen_params[4];
    layout(location = 0) in vec4 pos;
    layout(location = 0) out float bright;
    layout(location = 1) in float bright0;

    void main()
    {
        gl_Position = mat4(offscreen_params[0], offscreen_params[1], offscreen_params[2], offscreen_params[3]) * pos;
        bright = bright0;
    }

*/
pub const VS_OFFSCREEN_SOURCE_GLSL430: [u8; 315] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65,
    0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x34, 0x5d, 0x3b, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x6f, 0x75, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72,
    0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e,
    0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72,
    0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x6f, 0x66,
    0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d,
    0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
    0x73, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70,
    0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x33, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #version 430

    layout(location = 0) out vec4 frag_color_0;
    layout(location = 0) in float bright;
    layout(location = 1) out vec4 frag_color_1;
    layout(location = 2) out vec4 frag_color_2;

    void main()
    {
        frag_color_0 = vec4(bright, 0.0, 0.0, 1.0);
        frag_color_1 = vec4(0.0, bright, 0.0, 1.0);
        frag_color_2 = vec4(0.0, 0.0, bright, 1.0);
    }

*/
pub const FS_OFFSCREEN_SOURCE_GLSL430: [u8; 347] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63,
    0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
    0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x6f, 0x75,
    0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
    0x5f, 0x31, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x32, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x0a, 0x76, 0x6f,
    0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63,
    0x34, 0x28, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e,
    0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67,
    0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30,
    0x2e, 0x30, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20,
    0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c,
    0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x31, 0x2e, 0x30,
    0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #version 430

    uniform vec4 fsq_params[1];
    layout(location = 0) in vec2 pos;
    layout(location = 0) out vec2 uv0;
    layout(location = 1) out vec2 uv1;
    layout(location = 2) out vec2 uv2;

    void main()
    {
        gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
        uv0 = pos + vec2(fsq_params[0].x, 0.0);
        uv1 = pos + vec2(0.0, fsq_params[0].y);
        uv2 = pos;
        gl_Position.y = -gl_Position.y;
    }

*/
pub const VS_FSQ_SOURCE_GLSL430: [u8; 398] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x0a, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x73, 0x5b, 0x31, 0x5d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f,
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65,
    0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f,
    0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76,
    0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c,
    0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20,
    0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28,
    0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x32, 0x29, 0x20, 0x6f, 0x75, 0x74,
    0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50,
    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x28, 0x70,
    0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28,
    0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x76,
    0x65, 0x63, 0x32, 0x28, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30, 0x5d,
    0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x31,
    0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30,
    0x2c, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5b, 0x30, 0x5d, 0x2e, 0x79,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x79, 0x20, 0x3d, 0x20, 0x2d, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
    0x79, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #version 430

    layout(binding = 0) uniform sampler2D tex0_smp;
    layout(binding = 1) uniform sampler2D tex1_smp;
    layout(binding = 2) uniform sampler2D tex2_smp;

    layout(location = 0) in vec2 uv0;
    layout(location = 1) in vec2 uv1;
    layout(location = 2) in vec2 uv2;
    layout(location = 0) out vec4 frag_color;

    void main()
    {
        frag_color = vec4((texture(tex0_smp, uv0).xyz + texture(tex1_smp, uv1).xyz) + texture(tex2_smp, uv2).xyz, 1.0);
    }

*/
pub const FS_FSQ_SOURCE_GLSL430: [u8; 438] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20,
    0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44,
    0x20, 0x74, 0x65, 0x78, 0x30, 0x5f, 0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
    0x28, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x75, 0x6e, 0x69,
    0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65,
    0x78, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x62, 0x69,
    0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x32, 0x29, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72,
    0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x32, 0x5f,
    0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32,
    0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32,
    0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x32, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32,
    0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63,
    0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x0a, 0x76, 0x6f,
    0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28,
    0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x30, 0x5f, 0x73, 0x6d, 0x70,
    0x2c, 0x20, 0x75, 0x76, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74,
    0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x31, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x75, 0x76, 0x31,
    0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28,
    0x74, 0x65, 0x78, 0x32, 0x5f, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x75, 0x76, 0x32, 0x29, 0x2e, 0x78, 0x79,
    0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #version 430

    layout(location = 0) in vec2 pos;
    layout(location = 0) out vec2 uv;

    void main()
    {
        gl_Position = vec4((pos * 2.0) - vec2(1.0), 0.5, 1.0);
        uv = pos;
        gl_Position.y = -gl_Position.y;
    }

*/
pub const VS_DBG_SOURCE_GLSL430: [u8; 210] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29,
    0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x76, 0x6f,
    0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67,
    0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34,
    0x28, 0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x76, 0x65,
    0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79,
    0x20, 0x3d, 0x20, 0x2d, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79,
    0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #version 430

    layout(binding = 0) uniform sampler2D tex_smp;

    layout(location = 0) out vec4 frag_color;
    layout(location = 0) in vec2 uv;

    void main()
    {
        frag_color = vec4(texture(tex_smp, uv).xyz, 1.0);
    }

*/
pub const FS_DBG_SOURCE_GLSL430: [u8; 210] = [
    0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x33, 0x30, 0x0a, 0x0a, 0x6c, 0x61, 0x79,
    0x6f, 0x75, 0x74, 0x28, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20,
    0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44,
    0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x6d, 0x70, 0x3b, 0x0a, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
    0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x6f, 0x75,
    0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
    0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x3d, 0x20, 0x30, 0x29, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x3b,
    0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76,
    0x65, 0x63, 0x34, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73,
    0x6d, 0x70, 0x2c, 0x20, 0x75, 0x76, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29,
    0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    cbuffer offscreen_params : register(b0)
    {
        row_major float4x4 _19_mvp : packoffset(c0);
    };


    static float4 gl_Position;
    static float4 pos;
    static float bright;
    static float bright0;

    struct SPIRV_Cross_Input
    {
        float4 pos : TEXCOORD0;
        float bright0 : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float bright : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = mul(pos, _19_mvp);
        bright = bright0;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        pos = stage_input.pos;
        bright0 = stage_input.bright0;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.bright = bright;
        return stage_output;
    }
*/
pub const VS_OFFSCREEN_SOURCE_HLSL5: [u8; 736] = [
    0x63, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
    0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
    0x72, 0x28, 0x62, 0x30, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x6f, 0x77, 0x5f, 0x6d,
    0x61, 0x6a, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x5f, 0x31, 0x39,
    0x5f, 0x6d, 0x76, 0x70, 0x20, 0x3a, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
    0x28, 0x63, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73,
    0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44,
    0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x30, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x31, 0x3b, 0x0a,
    0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f,
    0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3a, 0x20,
    0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x3a, 0x20, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x3b,
    0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28,
    0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x6d, 0x75, 0x6c, 0x28, 0x70, 0x6f, 0x73, 0x2c, 0x20, 0x5f, 0x31, 0x39,
    0x5f, 0x6d, 0x76, 0x70, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x3d, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50,
    0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f,
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
    0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
    0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74,
    0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x67, 0x6c,
    0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x3d, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
    static float4 frag_color_0;
    static float bright;
    static float4 frag_color_1;
    static float4 frag_color_2;

    struct SPIRV_Cross_Input
    {
        float bright : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color_0 : SV_Target0;
        float4 frag_color_1 : SV_Target1;
        float4 frag_color_2 : SV_Target2;
    };

    void frag_main()
    {
        frag_color_0 = float4(bright, 0.0f, 0.0f, 1.0f);
        frag_color_1 = float4(0.0f, bright, 0.0f, 1.0f);
        frag_color_2 = float4(0.0f, 0.0f, bright, 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        bright = stage_input.bright;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color_0 = frag_color_0;
        stage_output.frag_color_1 = frag_color_1;
        stage_output.frag_color_2 = frag_color_2;
        return stage_output;
    }
*/
pub const FS_OFFSCREEN_SOURCE_HLSL5: [u8; 804] = [
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61,
    0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x73, 0x74,
    0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
    0x32, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f,
    0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x3a, 0x20, 0x54,
    0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72,
    0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f,
    0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3a, 0x20,
    0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
    0x31, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x31, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
    0x32, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67,
    0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x28, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e,
    0x30, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72,
    0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20,
    0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20,
    0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x7d, 0x0a,
    0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70,
    0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f,
    0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
    0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x62, 0x72,
    0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61,
    0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43,
    0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c,
    0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
    0x5f, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74,
    0x70, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20,
    0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61,
    0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65,
    0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
    cbuffer fsq_params : register(b0)
    {
        float2 _36_offset : packoffset(c0);
    };


    static float4 gl_Position;
    static float2 pos;
    static float2 uv0;
    static float2 uv1;
    static float2 uv2;

    struct SPIRV_Cross_Input
    {
        float2 pos : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float2 uv0 : TEXCOORD0;
        float2 uv1 : TEXCOORD1;
        float2 uv2 : TEXCOORD2;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = float4((pos * 2.0f) - 1.0f.xx, 0.5f, 1.0f);
        uv0 = pos + float2(_36_offset.x, 0.0f);
        uv1 = pos + float2(0.0f, _36_offset.y);
        uv2 = pos;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        pos = stage_input.pos;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.uv0 = uv0;
        stage_output.uv1 = uv1;
        stage_output.uv2 = uv2;
        return stage_output;
    }
*/
pub const VS_FSQ_SOURCE_HLSL5: [u8; 879] = [
    0x63, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
    0x73, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x62, 0x30, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x36, 0x5f,
    0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x3a, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x73,
    0x65, 0x74, 0x28, 0x63, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
    0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
    0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f,
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x32, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30,
    0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52,
    0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3a, 0x20,
    0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f,
    0x52, 0x44, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75,
    0x76, 0x32, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x32, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50,
    0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28,
    0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e,
    0x30, 0x66, 0x2e, 0x78, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20,
    0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x33, 0x36, 0x5f, 0x6f, 0x66, 0x66, 0x73,
    0x65, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x32, 0x28, 0x30, 0x2e, 0x30, 0x66, 0x2c, 0x20, 0x5f, 0x33, 0x36, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
    0x74, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x70,
    0x6f, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73,
    0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49,
    0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
    0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61,
    0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43,
    0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x2e, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x31, 0x20,
    0x3d, 0x20, 0x75, 0x76, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
    0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x75, 0x76, 0x32, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
    Texture2D<float4> tex0 : register(t0);
    SamplerState smp : register(s0);
    Texture2D<float4> tex1 : register(t1);
    Texture2D<float4> tex2 : register(t2);

    static float2 uv0;
    static float2 uv1;
    static float2 uv2;
    static float4 frag_color;

    struct SPIRV_Cross_Input
    {
        float2 uv0 : TEXCOORD0;
        float2 uv1 : TEXCOORD1;
        float2 uv2 : TEXCOORD2;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    void frag_main()
    {
        frag_color = float4((tex0.Sample(smp, uv0).xyz + tex1.Sample(smp, uv1).xyz) + tex2.Sample(smp, uv2).xyz, 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uv0 = stage_input.uv0;
        uv1 = stage_input.uv1;
        uv2 = stage_input.uv2;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
pub const FS_FSQ_SOURCE_HLSL5: [u8; 818] = [
    0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e,
    0x20, 0x74, 0x65, 0x78, 0x30, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28,
    0x74, 0x30, 0x29, 0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
    0x20, 0x73, 0x6d, 0x70, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73,
    0x30, 0x29, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x34, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x31, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73,
    0x74, 0x65, 0x72, 0x28, 0x74, 0x31, 0x29, 0x3b, 0x0a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32,
    0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x32, 0x20, 0x3a, 0x20,
    0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74, 0x32, 0x29, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
    0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x3b, 0x0a,
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31,
    0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75,
    0x76, 0x32, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72,
    0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49,
    0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x20, 0x75, 0x76, 0x30, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x3a,
    0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f,
    0x4f, 0x52, 0x44, 0x32, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20,
    0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75,
    0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72,
    0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72,
    0x67, 0x65, 0x74, 0x30, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x66, 0x72,
    0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x34, 0x28, 0x28, 0x74, 0x65, 0x78, 0x30, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d,
    0x70, 0x2c, 0x20, 0x75, 0x76, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78,
    0x31, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x75, 0x76, 0x31,
    0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x74, 0x65, 0x78, 0x32, 0x2e, 0x53, 0x61, 0x6d,
    0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x75, 0x76, 0x32, 0x29, 0x2e, 0x78, 0x79, 0x7a,
    0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52, 0x56,
    0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69,
    0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e, 0x70,
    0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a, 0x7b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
    0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76,
    0x31, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x75,
    0x76, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61,
    0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70,
    0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67,
    0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72,
    0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d,
    0x0a, 0x00,
];
/*
    static float4 gl_Position;
    static float2 pos;
    static float2 uv;

    struct SPIRV_Cross_Input
    {
        float2 pos : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float2 uv : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        gl_Position = float4((pos * 2.0f) - 1.0f.xx, 0.5f, 1.0f);
        uv = pos;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        pos = stage_input.pos;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.uv = uv;
        return stage_output;
    }
*/
pub const VS_DBG_SOURCE_HLSL5: [u8; 555] = [
    0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
    0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72,
    0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49,
    0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x20, 0x70, 0x6f, 0x73, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b,
    0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56,
    0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x20, 0x3a, 0x20, 0x54, 0x45,
    0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3a, 0x20,
    0x53, 0x56, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a,
    0x76, 0x6f, 0x69, 0x64, 0x20, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20,
    0x32, 0x2e, 0x30, 0x66, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x2e, 0x78, 0x78, 0x2c, 0x20,
    0x30, 0x2e, 0x35, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x75, 0x76, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50, 0x49, 0x52,
    0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6d, 0x61,
    0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x49, 0x6e,
    0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x76,
    0x65, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53,
    0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c,
    0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f,
    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65,
    0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x75, 0x76, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f,
    0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
    Texture2D<float4> tex : register(t0);
    SamplerState smp : register(s0);

    static float4 frag_color;
    static float2 uv;

    struct SPIRV_Cross_Input
    {
        float2 uv : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };

    void frag_main()
    {
        frag_color = float4(tex.Sample(smp, uv).xyz, 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        uv = stage_input.uv;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
pub const FS_DBG_SOURCE_HLSL5: [u8; 527] = [
    0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x3e,
    0x20, 0x74, 0x65, 0x78, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x74,
    0x30, 0x29, 0x3b, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x20,
    0x73, 0x6d, 0x70, 0x20, 0x3a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x28, 0x73, 0x30,
    0x29, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34,
    0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x73, 0x74, 0x61, 0x74,
    0x69, 0x63, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x3b, 0x0a, 0x0a, 0x73, 0x74,
    0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f,
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x32, 0x20, 0x75, 0x76, 0x20, 0x3a, 0x20, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x30, 0x3b,
    0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x53, 0x50, 0x49, 0x52, 0x56,
    0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x20, 0x3a, 0x20, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x30, 0x3b,
    0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61,
    0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78,
    0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x75, 0x76, 0x29, 0x2e,
    0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x66, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x53, 0x50,
    0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x28, 0x53, 0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f,
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
    0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x76, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, 0x67,
    0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x53,
    0x50, 0x49, 0x52, 0x56, 0x5f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
    0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x66, 0x72,
    0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,
];
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct offscreen_params
    {
        float4x4 mvp;
    };

    struct main0_out
    {
        float bright [[user(locn0)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float4 pos [[attribute(0)]];
        float bright0 [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant offscreen_params& _19 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = _19.mvp * in.pos;
        out.bright = in.bright0;
        return out;
    }

*/
pub const VS_OFFSCREEN_SOURCE_METAL_MACOS: [u8; 515] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72,
    0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x76, 0x70, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a,
    0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74,
    0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67,
    0x68, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d,
    0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x34, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x20, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72,
    0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76,
    0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20,
    0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e,
    0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70,
    0x61, 0x72, 0x61, 0x6d, 0x73, 0x26, 0x20, 0x5f, 0x31, 0x39, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66,
    0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61,
    0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x39, 0x2e, 0x6d, 0x76, 0x70, 0x20, 0x2a, 0x20, 0x69,
    0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x72,
    0x69, 0x67, 0x68, 0x74, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x30,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b,
    0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main0_out
    {
        float4 frag_color_0 [[color(0)]];
        float4 frag_color_1 [[color(1)]];
        float4 frag_color_2 [[color(2)]];
    };

    struct main0_in
    {
        float bright [[user(locn0)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.frag_color_0 = float4(in.bright, 0.0, 0.0, 1.0);
        out.frag_color_1 = float4(0.0, in.bright, 0.0, 1.0);
        out.frag_color_2 = float4(0.0, 0.0, in.bright, 1.0);
        return out;
    }

*/
pub const FS_OFFSCREEN_SOURCE_METAL_MACOS: [u8; 533] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20,
    0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x5f, 0x32, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x32, 0x29, 0x5d, 0x5d, 0x3b,
    0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30,
    0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62,
    0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e,
    0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
    0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30,
    0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74,
    0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d,
    0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f,
    0x6c, 0x6f, 0x72, 0x5f, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x69, 0x6e,
    0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30,
    0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66,
    0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f,
    0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68,
    0x74, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x32,
    0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e,
    0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2c, 0x20, 0x31, 0x2e, 0x30,
    0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74,
    0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct fsq_params
    {
        float2 offset;
    };

    struct main0_out
    {
        float2 uv0 [[user(locn0)]];
        float2 uv1 [[user(locn1)]];
        float2 uv2 [[user(locn2)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 pos [[attribute(0)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant fsq_params& _36 [[buffer(0)]])
    {
        main0_out out = {};
        out.gl_Position = float4((in.pos * 2.0) - float2(1.0), 0.5, 1.0);
        out.uv0 = in.pos + float2(_36.offset.x, 0.0);
        out.uv1 = in.pos + float2(0.0, _36.offset.y);
        out.uv2 = in.pos;
        return out;
    }

*/
pub const VS_FSQ_SOURCE_METAL_MACOS: [u8; 653] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61,
    0x72, 0x61, 0x6d, 0x73, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x20, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75,
    0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20,
    0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73,
    0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72,
    0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c,
    0x6f, 0x63, 0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b,
    0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73,
    0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x5b, 0x5b,
    0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d,
    0x3b, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f,
    0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e,
    0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c,
    0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x73, 0x71, 0x5f, 0x70, 0x61, 0x72,
    0x61, 0x6d, 0x73, 0x26, 0x20, 0x5f, 0x33, 0x36, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
    0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e,
    0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28, 0x69, 0x6e, 0x2e, 0x70, 0x6f,
    0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32,
    0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x30, 0x20, 0x3d, 0x20, 0x69, 0x6e,
    0x2e, 0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x33, 0x36,
    0x2e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a,
    0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x31, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e,
    0x70, 0x6f, 0x73, 0x20, 0x2b, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c,
    0x20, 0x5f, 0x33, 0x36, 0x2e, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20,
    0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x32, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x70,
    0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75,
    0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float2 uv0 [[user(locn0)]];
        float2 uv1 [[user(locn1)]];
        float2 uv2 [[user(locn2)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex0 [[texture(0)]], texture2d<float> tex1 [[texture(1)]], texture2d<float> tex2 [[texture(2)]], sampler smp [[sampler(0)]])
    {
        main0_out out = {};
        out.frag_color = float4((tex0.sample(smp, in.uv0).xyz + tex1.sample(smp, in.uv1).xyz) + tex2.sample(smp, in.uv2).xyz, 1.0);
        return out;
    }

*/
pub const FS_FSQ_SOURCE_METAL_MACOS: [u8; 616] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63,
    0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72,
    0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x31, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c,
    0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x32, 0x20, 0x75, 0x76, 0x32, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63,
    0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
    0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e,
    0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73,
    0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
    0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x30, 0x20, 0x5b,
    0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65,
    0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65,
    0x78, 0x31, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d,
    0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74,
    0x3e, 0x20, 0x74, 0x65, 0x78, 0x32, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28,
    0x32, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6d, 0x70,
    0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a,
    0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f,
    0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61,
    0x74, 0x34, 0x28, 0x28, 0x74, 0x65, 0x78, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73,
    0x6d, 0x70, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x75, 0x76, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b,
    0x20, 0x74, 0x65, 0x78, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d, 0x70, 0x2c,
    0x20, 0x69, 0x6e, 0x2e, 0x75, 0x76, 0x31, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x74,
    0x65, 0x78, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x69,
    0x6e, 0x2e, 0x75, 0x76, 0x32, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b,
    0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a,
    0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main0_out
    {
        float2 uv [[user(locn0)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 pos [[attribute(0)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
        out.gl_Position = float4((in.pos * 2.0) - float2(1.0), 0.5, 1.0);
        out.uv = in.pos;
        return out;
    }

*/
pub const VS_DBG_SOURCE_METAL_MACOS: [u8; 404] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20,
    0x75, 0x76, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d,
    0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f,
    0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
    0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c,
    0x6f, 0x61, 0x74, 0x32, 0x20, 0x70, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
    0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x65, 0x72,
    0x74, 0x65, 0x78, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x61, 0x69,
    0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b,
    0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20,
    0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f,
    0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x28,
    0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x66,
    0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20,
    0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x75, 0x76, 0x20,
    0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74,
    0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct main0_out
    {
        float4 frag_color [[color(0)]];
    };

    struct main0_in
    {
        float2 uv [[user(locn0)]];
    };

    fragment main0_out main0(main0_in in [[stage_in]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(0)]])
    {
        main0_out out = {};
        out.frag_color = float4(tex.sample(smp, in.uv).xyz, 1.0);
        return out;
    }

*/
pub const FS_DBG_SOURCE_METAL_MACOS: [u8; 408] = [
    0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73,
    0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c,
    0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69,
    0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f,
    0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20,
    0x66, 0x72, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f,
    0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63,
    0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x75, 0x76, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28,
    0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61,
    0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6d,
    0x61, 0x69, 0x6e, 0x30, 0x28, 0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20,
    0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78,
    0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78,
    0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20,
    0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x73, 0x6d, 0x70, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d,
    0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20,
    0x6d, 0x61, 0x69, 0x6e, 0x30, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b,
    0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x63,
    0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78,
    0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x73, 0x6d, 0x70, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x75,
    0x76, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20,
    0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00,
];
pub fn dbg_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    desc.label = c"dbg_shader".as_ptr();
    match backend {
        sg::Backend::Glcore => {
            desc.vertex_func.source = &VS_DBG_SOURCE_GLSL430 as *const _ as *const _;
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_DBG_SOURCE_GLSL430 as *const _ as *const _;
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].glsl_name = c"pos".as_ptr();
            desc.views[0].texture.stage = sg::ShaderStage::Fragment;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.image_type = sg::ImageType::Dim2;
            desc.views[0].texture.sample_type = sg::ImageSampleType::Float;
            desc.samplers[0].stage = sg::ShaderStage::Fragment;
            desc.samplers[0].sampler_type = sg::SamplerType::Filtering;
            desc.texture_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = c"tex_smp".as_ptr();
        },
        sg::Backend::D3d11 => {
            desc.vertex_func.source = &VS_DBG_SOURCE_HLSL5 as *const _ as *const _;
            desc.vertex_func.d3d11_target = c"vs_5_0".as_ptr();
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_DBG_SOURCE_HLSL5 as *const _ as *const _;
            desc.fragment_func.d3d11_target = c"ps_5_0".as_ptr();
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].hlsl_sem_name = c"TEXCOORD".as_ptr();
            desc.attrs[0].hlsl_sem_index = 0;
            desc.views[0].texture.stage = sg::ShaderStage::Fragment;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.image_type = sg::ImageType::Dim2;
            desc.views[0].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[0].texture.hlsl_register_t_n = 0;
            desc.samplers[0].stage = sg::ShaderStage::Fragment;
            desc.samplers[0].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.texture_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
        },
        sg::Backend::MetalMacos => {
            desc.vertex_func.source = &VS_DBG_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.vertex_func.entry = c"main0".as_ptr();
            desc.fragment_func.source = &FS_DBG_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.fragment_func.entry = c"main0".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.views[0].texture.stage = sg::ShaderStage::Fragment;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.image_type = sg::ImageType::Dim2;
            desc.views[0].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[0].texture.msl_texture_n = 0;
            desc.samplers[0].stage = sg::ShaderStage::Fragment;
            desc.samplers[0].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[0].msl_sampler_n = 0;
            desc.texture_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
        },
        _ => {},
    }
    desc
}
pub fn fsq_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    desc.label = c"fsq_shader".as_ptr();
    match backend {
        sg::Backend::Glcore => {
            desc.vertex_func.source = &VS_FSQ_SOURCE_GLSL430 as *const _ as *const _;
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_FSQ_SOURCE_GLSL430 as *const _ as *const _;
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].glsl_name = c"pos".as_ptr();
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0]._type = sg::UniformType::Float4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = c"fsq_params".as_ptr();
            desc.views[0].texture.stage = sg::ShaderStage::Fragment;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.image_type = sg::ImageType::Dim2;
            desc.views[0].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[1].texture.stage = sg::ShaderStage::Fragment;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.image_type = sg::ImageType::Dim2;
            desc.views[1].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[2].texture.stage = sg::ShaderStage::Fragment;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.image_type = sg::ImageType::Dim2;
            desc.views[2].texture.sample_type = sg::ImageSampleType::Float;
            desc.samplers[0].stage = sg::ShaderStage::Fragment;
            desc.samplers[0].sampler_type = sg::SamplerType::Filtering;
            desc.texture_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = c"tex0_smp".as_ptr();
            desc.texture_sampler_pairs[1].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[1].view_slot = 1;
            desc.texture_sampler_pairs[1].sampler_slot = 0;
            desc.texture_sampler_pairs[1].glsl_name = c"tex1_smp".as_ptr();
            desc.texture_sampler_pairs[2].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[2].view_slot = 2;
            desc.texture_sampler_pairs[2].sampler_slot = 0;
            desc.texture_sampler_pairs[2].glsl_name = c"tex2_smp".as_ptr();
        },
        sg::Backend::D3d11 => {
            desc.vertex_func.source = &VS_FSQ_SOURCE_HLSL5 as *const _ as *const _;
            desc.vertex_func.d3d11_target = c"vs_5_0".as_ptr();
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_FSQ_SOURCE_HLSL5 as *const _ as *const _;
            desc.fragment_func.d3d11_target = c"ps_5_0".as_ptr();
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].hlsl_sem_name = c"TEXCOORD".as_ptr();
            desc.attrs[0].hlsl_sem_index = 0;
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.views[0].texture.stage = sg::ShaderStage::Fragment;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.image_type = sg::ImageType::Dim2;
            desc.views[0].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[0].texture.hlsl_register_t_n = 0;
            desc.views[1].texture.stage = sg::ShaderStage::Fragment;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.image_type = sg::ImageType::Dim2;
            desc.views[1].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[1].texture.hlsl_register_t_n = 1;
            desc.views[2].texture.stage = sg::ShaderStage::Fragment;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.image_type = sg::ImageType::Dim2;
            desc.views[2].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[2].texture.hlsl_register_t_n = 2;
            desc.samplers[0].stage = sg::ShaderStage::Fragment;
            desc.samplers[0].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[0].hlsl_register_s_n = 0;
            desc.texture_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[1].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[1].view_slot = 1;
            desc.texture_sampler_pairs[1].sampler_slot = 0;
            desc.texture_sampler_pairs[2].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[2].view_slot = 2;
            desc.texture_sampler_pairs[2].sampler_slot = 0;
        },
        sg::Backend::MetalMacos => {
            desc.vertex_func.source = &VS_FSQ_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.vertex_func.entry = c"main0".as_ptr();
            desc.fragment_func.source = &FS_FSQ_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.fragment_func.entry = c"main0".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.views[0].texture.stage = sg::ShaderStage::Fragment;
            desc.views[0].texture.multisampled = false;
            desc.views[0].texture.image_type = sg::ImageType::Dim2;
            desc.views[0].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[0].texture.msl_texture_n = 0;
            desc.views[1].texture.stage = sg::ShaderStage::Fragment;
            desc.views[1].texture.multisampled = false;
            desc.views[1].texture.image_type = sg::ImageType::Dim2;
            desc.views[1].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[1].texture.msl_texture_n = 1;
            desc.views[2].texture.stage = sg::ShaderStage::Fragment;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.image_type = sg::ImageType::Dim2;
            desc.views[2].texture.sample_type = sg::ImageSampleType::Float;
            desc.views[2].texture.msl_texture_n = 2;
            desc.samplers[0].stage = sg::ShaderStage::Fragment;
            desc.samplers[0].sampler_type = sg::SamplerType::Filtering;
            desc.samplers[0].msl_sampler_n = 0;
            desc.texture_sampler_pairs[0].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[1].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[1].view_slot = 1;
            desc.texture_sampler_pairs[1].sampler_slot = 0;
            desc.texture_sampler_pairs[2].stage = sg::ShaderStage::Fragment;
            desc.texture_sampler_pairs[2].view_slot = 2;
            desc.texture_sampler_pairs[2].sampler_slot = 0;
        },
        _ => {},
    }
    desc
}
pub fn offscreen_shader_desc(backend: sg::Backend) -> sg::ShaderDesc {
    let mut desc = sg::ShaderDesc::new();
    desc.label = c"offscreen_shader".as_ptr();
    match backend {
        sg::Backend::Glcore => {
            desc.vertex_func.source = &VS_OFFSCREEN_SOURCE_GLSL430 as *const _ as *const _;
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_OFFSCREEN_SOURCE_GLSL430 as *const _ as *const _;
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].glsl_name = c"pos".as_ptr();
            desc.attrs[1].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[1].glsl_name = c"bright0".as_ptr();
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 64;
            desc.uniform_blocks[0].glsl_uniforms[0]._type = sg::UniformType::Float4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 4;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = c"offscreen_params".as_ptr();
        },
        sg::Backend::D3d11 => {
            desc.vertex_func.source = &VS_OFFSCREEN_SOURCE_HLSL5 as *const _ as *const _;
            desc.vertex_func.d3d11_target = c"vs_5_0".as_ptr();
            desc.vertex_func.entry = c"main".as_ptr();
            desc.fragment_func.source = &FS_OFFSCREEN_SOURCE_HLSL5 as *const _ as *const _;
            desc.fragment_func.d3d11_target = c"ps_5_0".as_ptr();
            desc.fragment_func.entry = c"main".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[0].hlsl_sem_name = c"TEXCOORD".as_ptr();
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[1].hlsl_sem_name = c"TEXCOORD".as_ptr();
            desc.attrs[1].hlsl_sem_index = 1;
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 64;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
        },
        sg::Backend::MetalMacos => {
            desc.vertex_func.source = &VS_OFFSCREEN_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.vertex_func.entry = c"main0".as_ptr();
            desc.fragment_func.source = &FS_OFFSCREEN_SOURCE_METAL_MACOS as *const _ as *const _;
            desc.fragment_func.entry = c"main0".as_ptr();
            desc.attrs[0].base_type = sg::ShaderAttrBaseType::Float;
            desc.attrs[1].base_type = sg::ShaderAttrBaseType::Float;
            desc.uniform_blocks[0].stage = sg::ShaderStage::Vertex;
            desc.uniform_blocks[0].layout = sg::UniformLayout::Std140;
            desc.uniform_blocks[0].size = 64;
            desc.uniform_blocks[0].msl_buffer_n = 0;
        },
        _ => {},
    }
    desc
}
